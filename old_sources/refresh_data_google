#!/usr/bin/python3

import json
import os
import random
import subprocess
import sys

from optparse import OptionParser

import util

DEBUG = False

# https://en.wikipedia.org/wiki/ISO_3166-1
# https://en.wikipedia.org/wiki/List_of_national_capitals_in_alphabetical_order
# https://en.wikipedia.org/wiki/List_of_cities_proper_by_population
# Next: 41
locations = []
with open("cities.txt") as f:
  for line in f:
    if not line.startswith("#"):
      locations.append(line.strip())

DATA_FILE = "data.txt"

def has_data(location):
  for half_month in master_data[location]:
    for data_point in master_data[location][half_month]:
      if data_point != -9999:
        return True
  return False

def array_has_data(the_array):
  for a in the_array:
    if a != -9999:
      return True
  return False

if __name__ == "__main__":

  parser = OptionParser()
  parser.add_option("-f", "--force", dest="force",
                    action="store_true",
                    help="Force refresh existing data")
  parser.add_option("-n", "--number-of-updates", dest="number_of_updates",
                    help="Force refresh a set of number of random locations", default=0)
  (options, args) = parser.parse_args()

  random_update_indices = {}
  if options.number_of_updates != 0:
    number_of_updates = int(options.number_of_updates)
    while len(random_update_indices) < number_of_updates:
      index = int(random.random() * len(locations))
      if str(index) not in random_update_indices:
        random_update_indices[str(index)] = True
  print("Will update indices " + str(random_update_indices))

  def write_out(master_data, DATA_FILE):
    serialized = ""
    for location in sorted(master_data.keys()):
      serialized += location + ":" + json.dumps(master_data[location], sort_keys=True) + "\n"
    with open(DATA_FILE, "w") as f:
      f.write(serialized)
      f.close()

  master_data = {}
  if os.path.exists(DATA_FILE):
    lines = open(DATA_FILE).readlines()
    for l in lines:
      parts = l.split(":", 1)
      master_data[parts[0]] = json.loads(parts[1])

  index = -1
  for location in locations:
    index += 1
    (place, region_code) = location.split("|")
    buffer = len(place + ", " + region_code)
    sys.stdout.write(place + ", " + region_code)
    for i in range(0, 40 - buffer):
      sys.stdout.write(".")
    sys.stdout.write(" ")
    if location in master_data:
      should_skip = has_data(location)
      if options.force:
        should_skip = False
      if len(random_update_indices) > 0 and str(index) in random_update_indices:
        should_skip = False
      if should_skip:
        sys.stdout.write("âœ“\n")
        continue
    sys.stdout.flush()
    if place not in master_data:
      master_data[location] = {}
    lines = util.get_data_from_dremel(place, region_code).split("\n")
    data = {}
    for line in lines:
      parts = line.split("|")
      if len(parts) > 5:
        date = parts[1].strip()
        if date.startswith("2"):
          year = int(date[:4])
          month = int(date[4:6])
          day = int(date[6:8])
          month_half = str(month) + "-" + ("1" if day < 15 else "2")
          temp_min = float(parts[3].strip())
          temp_average = float(parts[4].strip())
          temp_max = float(parts[5].strip())
          rainfall = float(parts[6].strip())
          if str(year) not in data:
            data[str(year)] = {}
          if month_half not in data[str(year)]:
            data[str(year)][month_half] = []
          data[str(year)][month_half].append([temp_min, temp_average, temp_max, rainfall])
    sys.stdout.write(str(len(data)) + "y\n")
    sys.stdout.flush()
    if not len(data) and len(master_data):
      continue
    # Now we have ~15 temperature tuples (min, max, mean) for each half-month of
    # each year.
    # Let's start by reducing all this into one tuple for each half-month of each
    # year.
    for y in util.ALL_YEARS_STR:
      for month in range(1, 13):
          for suff in range(1, 3):
            month_half = str(month) + "-" + str(suff)
            if DEBUG and y in data and month_half in data[y]:
              print("Now going to average for " + month_half + " in " + y)
              print(data[y][month_half])
            # "-9999" is code for "no data"
            if y in data and month_half in data[y]:
              array_of_min_tmps = [float(p[0]) for p in data[y][month_half] if p[0] > -1000]
              array_of_average_temps = [float(p[1]) for p in data[y][month_half] if p[1] > -1000]
              array_of_max_tmps = [float(p[2]) for p in data[y][month_half] if p[2] > -1000]
              array_of_rainfall = [float(p[3]) for p in data[y][month_half] if p[3] > -1000]
              if len(array_of_max_tmps) > 0:
                max_temp_for_this_half_month = int(round(float(max(array_of_max_tmps))))
              else:
                max_temp_for_this_half_month = -9999
              if array_has_data(array_of_average_temps):
                average_temp_for_this_half_month = \
                    int(round(float(sum(array_of_average_temps)) / max(len(array_of_average_temps), 1)))
              else:
                average_temp_for_this_half_month = -9999
              if len(array_of_min_tmps) > 0:
                min_temp_for_this_half_month = int(round(float(min(array_of_min_tmps))))
              else:
                min_temp_for_this_half_month = -9999
              if array_has_data(array_of_rainfall):
                average_rainfall_for_this_half_month = \
                    int(round(float(sum(array_of_rainfall)) / max(len(array_of_rainfall), 1)))
              else:
                average_rainfall_for_this_half_month = -9999
              data[y][month_half] = [min_temp_for_this_half_month, average_temp_for_this_half_month, \
                  max_temp_for_this_half_month, average_rainfall_for_this_half_month]

    for month in range(1, 13):
      for suff in range(1, 3):
        month_half = str(month) + "-" + str(suff)
        # Now we need to average everything corresponding to this half-month for
        # all our available years.
        array_of_min_temps = []
        array_of_average_temps = []
        array_of_max_temps = []
        array_of_rainfall = []
        for y in util.ALL_YEARS_STR:
          if y in data and month_half in data[y]:
            if data[y][month_half][0] > -1000:
              array_of_min_temps.append(data[y][month_half][0])
            if data[y][month_half][1] > -1000:
              array_of_average_temps.append(data[y][month_half][1])
            if data[y][month_half][2] > -1000:
              array_of_max_temps.append(data[y][month_half][2])
            if data[y][month_half][3] > -1000:
              array_of_rainfall.append(data[y][month_half][3])

        if DEBUG:
          print("Averaging the following for " + month_half + " across all years:")
          print(array_of_average_temps)
        if array_has_data(array_of_min_temps):
          min_temp_average = \
              int(round(float(sum(array_of_min_temps)) / max(len(array_of_min_temps), 1)))
        else:
          min_temp_average = -9999
        if array_has_data(array_of_average_temps):
          temp_average = \
              int(round(float(sum(array_of_average_temps)) / max(len(array_of_average_temps), 1)))
        else:
          temp_average = -9999
        if array_has_data(array_of_max_temps):
          max_temp_average = \
              int(round(float(sum(array_of_max_temps)) / max(len(array_of_max_temps), 1)))
        else:
          max_temp_average = -9999
        if array_has_data(array_of_rainfall):
          rainfall_average = \
              int(round(float(sum(array_of_rainfall)) / max(len(array_of_rainfall), 1)))
        else:
          rainfall_average = -9999
        master_data[location][month_half] = [min_temp_average, temp_average, max_temp_average, rainfall_average]
    # Done with this location
    for y in util.ALL_YEARS_STR:
      if len(master_data[location]) != 24:
        print("Warning: only got " + str(len(master_data[location])) + \
            " half-months for " + place)
    # Write to disk after each location in case we get issues
    write_out(master_data, DATA_FILE)

  print("All done.")
